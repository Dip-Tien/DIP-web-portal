@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@using MyWebERP.Model
@using MyWebERP.Services

@inject IDataService DataService;
@inject Microsoft.Extensions.Localization.IStringLocalizer Language

<DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" @bind-IsActive="@IsMobile" />

<DxPopup @bind-Visible="@Visible"
         ShowCloseButton="true"
         CloseOnEscape="true"
         ShowFooter="true"
         ShowHeader="true"
         HeaderText="Bộ lọc"
         Width="@(IsMobile ? "100%" : "400px")"
         Height="@(IsMobile ? "100%" : "auto")">

    <BodyContentTemplate>
        <!-- Dự án -->
        <div class="mb-3">
            <label class="form-label fw-semibold">@Language["Dự án"]</label>
            <DxTextBox ReadOnly="true"
                       CssClass="selected-display-box"
                       Text="@SelectedWork?.work_name"
                       style="width:100%">
                <Buttons>
                    <DxEditorButton Click="@OpenWorkPopup"
                                    IconCssClass="oi oi-magnifying-glass"
                                    Position="EditorButtonPosition.Right" />
                </Buttons>
            </DxTextBox>
        </div>

        <!-- Block -->
        <div class="mb-3">
            <label class="form-label fw-semibold">@Language["Block"]</label>
            <DxTextBox ReadOnly="true"
                       CssClass="selected-display-box"
                       Text="@string.Join(", ", SelectedWorkItems.Select(b => b.work_item_name))"
                       style="width:100%">
                <Buttons>
                    <DxEditorButton Click="@OpenWorkItemPopup"
                                    IconCssClass="oi oi-magnifying-glass"
                                    Position="EditorButtonPosition.Right" />
                </Buttons>
            </DxTextBox>
        </div>

    </BodyContentTemplate>

    <FooterContentTemplate>
        <div class="d-flex gap-2 w-100">
            <DxButton CssClass="flex-grow-1" Click="Confirm" RenderStyle="ButtonRenderStyle.Primary" Text="@Language["Hoàn tất"]" />
            <DxButton CssClass="flex-grow-1" Click="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Text="@Language["Hủy"]" />
        </div>
    </FooterContentTemplate>
</DxPopup>

<!-- Popup chọn dự án -->
<DxPopup @bind-Visible="@WorkPopupVisible"
        ShowFooter="true"
         Width="@(IsMobile ? "100%" : "400px")"
         Height="@(IsMobile ? "100%" : "auto")">
    <HeaderContentTemplate><b>@Language["Chọn dự án"]</b></HeaderContentTemplate>
    <BodyContentTemplate>
        <DxListBox Data="@Works"
                    TData="WorkLookupModel"
                   TValue="WorkLookupModel"
                   TextFieldName="@nameof(WorkLookupModel.work_name)"
                   ValueFieldName="@nameof(WorkLookupModel.work_id)"
                   @bind-Value="@SelectedWork"
                   SelectionMode="ListBoxSelectionMode.Single" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <div class="d-flex gap-2 w-100">
            <DxButton CssClass="flex-grow-1" Click="@WorkConfirmFilter" RenderStyle="ButtonRenderStyle.Secondary" Text="@Language["Hoàn tất"]" />
            <DxButton CssClass="flex-grow-1" Text="@Language["Xong"]" Click="@WorkConfirmSelection" RenderStyle="ButtonRenderStyle.Primary" />
            <DxButton CssClass="flex-grow-1" Text="@Language["Hủy"]" Click="@(() => WorkPopupVisible = false)" RenderStyle="ButtonRenderStyle.Secondary" />
        </div>
    </FooterContentTemplate>
</DxPopup>

<!-- Popup chọn block -->
<DxPopup @bind-Visible="@WorkItemPopupVisible"
         ShowFooter="true"
         Width="@(IsMobile ? "100%" : "400px")"
         Height="@(IsMobile ? "100%" : "auto")">
    <HeaderContentTemplate><b>@Language["Chọn block"]</b></HeaderContentTemplate>
    <BodyContentTemplate>
        <DxButton Click="WorkItemToggleAll" RenderStyle="@(WorkItemCheckedAll? ButtonRenderStyle.Secondary: ButtonRenderStyle.Primary)" Text="@WorkItemToggleButtonText" />

        <DxListBox Data="@WorkItems"
                   TextFieldName="@nameof(WorkItemLookupModel.work_item_name)"
                   ValueFieldName="@nameof(WorkItemLookupModel.work_item_id)"
                   @bind-Values="@SelectedWorkItems"
                   ShowCheckboxes="@AllowMultiBlock"
                   SelectionMode="@(AllowMultiBlock? ListBoxSelectionMode.Multiple: ListBoxSelectionMode.Single)" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <div class="d-flex gap-2 w-100">
            <DxButton CssClass="flex-grow-1" Click="@WorkItemConfirmFilter" RenderStyle="ButtonRenderStyle.Secondary" Text="@Language["Hoàn tất"]" />
            <DxButton CssClass="flex-grow-1" Click="@(() => WorkItemPopupVisible = false)" RenderStyle="ButtonRenderStyle.Primary" Text="@Language["Xong"]" />
            <DxButton CssClass="flex-grow-1" Text="@Language["Hủy"]" Click="@(() => WorkItemPopupVisible = false)" RenderStyle="ButtonRenderStyle.Secondary" />
        </div>
    </FooterContentTemplate>
</DxPopup>

@code
{
    [Parameter] public EventCallback<(WorkLookupModel Work, List<WorkItemLookupModel> WorkItems)> OnConfirm { get; set; }
    [Parameter] public bool AllowMultiBlock { get; set; } = true;
    [Parameter] public string CompanyId { get; set; }
    [Parameter] public string CompanyMenuId { get; set; }

    private bool Visible { get; set; }
    private bool WorkPopupVisible { get; set; }
    private bool WorkItemPopupVisible { get; set; }

    private WorkLookupModel? SelectedWork { get; set; }
    private IEnumerable<WorkItemLookupModel> SelectedWorkItems { get; set; } = new List<WorkItemLookupModel>();

    // Thay bằng API
    private List<WorkLookupModel> Works { get; set; } = new();
    private List<WorkItemLookupModel> WorkItems { get; set; } = new();

    public void Hide() => Visible = false;

    private void OpenWorkPopup() => WorkPopupVisible = true;
    private void OpenWorkItemPopup() => WorkItemPopupVisible = true;

    #region Root

    private async Task Confirm()
    {
        // Cho lên trên để đóng trước khi xử lý dữ liệu.
        Hide();
        StateHasChanged();

        await OnConfirm.InvokeAsync((SelectedWork, SelectedWorkItems as List<WorkItemLookupModel>));
    }

    private void Cancel() => Hide();

    private bool IsMobile { get; set; }

    /// <summary>
    /// load guard
    /// </summary>
    private bool _isLoaded = false;

    private async Task LoadDataAsync()
    {
        Works = await DataService.LookupCode<WorkLookupModel>(this.CompanyId, "", "", "", DateTime.Now, "WORK001", 1, "", 0, 0, 0, 0, this.CompanyMenuId, "WORK_LOOKUP_W");
    }

    /// <summary>
    /// public method để gọi từ parent
    /// </summary>
    /// <param name="forceReload"></param>
    /// <returns></returns>
    public async Task ShowAsync(bool forceReload = false)
    {
        if (!_isLoaded || forceReload)
        {
            await LoadDataAsync();
            _isLoaded = true;
        }

        Visible = true;
    }

    #endregion end root

    #region work
    protected async Task WorkConfirmSelection()
    {
        // Hiển thị tên node đã chọn
        WorkPopupVisible = false;

        string workId = (SelectedWork == null ? "" : SelectedWork.work_id);
        WorkItems = await DataService.LookupCode<WorkItemLookupModel>(this.CompanyId, "", "", "", DateTime.Now, "WORK_ITEM001", 1, workId, 0, 0, 0, 0, this.CompanyMenuId, "WORK_ITEM_LOOKUP_W");

        SelectedWorkItems = new List<WorkItemLookupModel>();
    }

    /// <summary>
    /// Đóng lookup work và đóng filter luôn
    /// </summary>
    /// <returns></returns>
    private async Task WorkConfirmFilter()
    {
        // 1) đóng popup chọn dự án (con) trước
        WorkPopupVisible = false;
        //Hide();
        await InvokeAsync(StateHasChanged);

        // 2) chờ 1 vòng event loop / allow DOM update (nhỏ thôi)
        await Task.Delay(30); // 10-50ms tùy cần; Task.Yield() có thể dùng thay

        // 3) đóng popup chính (cha)
        Visible = false;
        await InvokeAsync(StateHasChanged);

        // 4) chuẩn bị kết quả để trả về parent
        var result = (SelectedWork, (SelectedWorkItems ?? Enumerable.Empty<WorkItemLookupModel>()).ToList());

        // 5) báo cho parent xử lý (parent sẽ show skeleton / load)
        if (OnConfirm.HasDelegate)
            await OnConfirm.InvokeAsync(result);
    }

    #endregion end work

    #region work item

    /// <summary>
    /// Đóng lookup work item và đóng filter luôn
    /// </summary>
    /// <returns></returns>
    private async Task WorkItemConfirmFilter()
    {
        // 1) đóng popup chọn dự án (con) trước
        WorkItemPopupVisible = false;
        //Hide();
        await InvokeAsync(StateHasChanged);

        // 2) chờ 1 vòng event loop / allow DOM update (nhỏ thôi)
        await Task.Delay(30); // 10-50ms tùy cần; Task.Yield() có thể dùng thay

        // 3) đóng popup chính (cha)
        Visible = false;
        await InvokeAsync(StateHasChanged);

        // 4) chuẩn bị kết quả để trả về parent
        var result = (SelectedWork, (SelectedWorkItems ?? Enumerable.Empty<WorkItemLookupModel>()).ToList());

        // 5) báo cho parent xử lý (parent sẽ show skeleton / load)
        if (OnConfirm.HasDelegate)
            await OnConfirm.InvokeAsync(result);
    }

    protected bool WorkItemCheckedAll => (SelectedWorkItems?.Count() == WorkItems?.Count);

    protected string WorkItemToggleButtonText => WorkItemCheckedAll ? Language["Bỏ chọn hết"] : Language["Chọn hết"];

    protected void WorkItemToggleAll()
    {
        if (WorkItems == null) return;

        if (SelectedWorkItems?.Count() == WorkItems.Count)
        {
            // Đang chọn hết → bỏ chọn
            SelectedWorkItems = new List<WorkItemLookupModel>();
        }
        else
        {
            // Chưa chọn hết → chọn hết
            SelectedWorkItems = WorkItems.ToList();
        }
    }

    #endregion end work item
}