@using MyWebERP.Data;

@implements IMyPopup

@code {

    protected string FormTitle = "Thêm dữ liệu";

    [Parameter] public Microsoft.Extensions.Localization.IStringLocalizer Language { get; set; }
    [Parameter] public int PopupLayerIndex { get; set; } = 1500;
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public SizeMode? SizeMode { get; set; }
    
    [Parameter] public string CompanyId { get; set; }
    [Parameter] public string EditDataId { get; set; }
    [Parameter] public EditFormStatus FormStatus { get; set; }

    [Parameter] public MyWebERP.Model.MenuItem MenuItem { get; set; }

    [Parameter] public Blazored.LocalStorage.ILocalStorageService LocalStorageService { get; set; }
    [Parameter] public Services.IDataService DataService { get; set; }

    [Parameter] public EventCallback<string> CompanyIdChanged { get; set; }
    [Parameter] public EventCallback<EditFormStatus> FormStatusChanged { get; set; }

    [Parameter] public EventCallback<string> EditDataIdChanged { get; set; }
    [Parameter] public EventCallback<MyWebERP.Model.MenuItem> MenuItemChanged { get; set; }

    protected string MyErrorMessage = "";
    protected bool isXSmallScreen;

    protected override async Task OnParametersSetAsync()
    {
        MyErrorMessage = "";
    }

    protected virtual async Task NewItem_Click()
    {
        FormStatus = EditFormStatus.NEW;
    }
    protected virtual async Task EditItem_Click()
    {
        FormStatus = EditFormStatus.EDIT;
    }
    protected virtual async Task DeleteItem_Click()
    {
    }

    #region Implement IMyPopup
    [Parameter] public EventCallback<object?> OnClose { get; set; }
    public virtual bool IsVisible => Visible;
    public virtual string Title => FormTitle;
    public virtual event Func<object?, Task>? PopupClosed;

    public virtual async Task ShowAsync(object? parameter = null)
    {
        Visible = true;
        await VisibleChanged.InvokeAsync(true);
        await InvokeAsync(StateHasChanged);
    }

    // Chỉnh CloseAsync để accept result và gọi OnClose + PopupClosed
    public virtual async Task CloseAsync(object? result = null)
    {
        Visible = false;
        await VisibleChanged.InvokeAsync(false);

        // gọi EventCallback được gán từ PopupService (nếu có)
        if (OnClose.HasDelegate)
            await OnClose.InvokeAsync(result);

        // gọi event nội bộ để component khác lắng nghe
        if (PopupClosed != null)
            await PopupClosed.Invoke(result);

        await InvokeAsync(StateHasChanged);
    }

    // method này con có thể gọi sau khi lưu thành công
    protected async Task OnPopupClosed(object? result = null)
    {
        if (PopupClosed != null)
            await PopupClosed.Invoke(result);
    }

    #endregion Implement IMyPopup
}
