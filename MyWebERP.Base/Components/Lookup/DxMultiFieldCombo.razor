@typeparam TItem

<DxDropDown @bind-Visible="@IsDropdownVisible"
            CloseOnOutsideClick="true"
            Width="100%"
            PositionTarget="@($"#{InputId}")"
            
            CssClass="border-0 shadow-lg rounded-3 p-0">

    <BodyContentTemplate>
        <DxTextBox id="@InputId"
                   @bind-Text="@SearchText"
                   NullText="@Placeholder"
                   @onfocus="()=>IsDropdownVisible = true"
                   @oninput="OnSearchChanged"
                   ReadOnly="@ReadOnly" />
        <div style="max-height:300px; overflow-y:auto;">
            @if (IsLoading)
            {
                <div class="text-center text-muted py-3 small">@LoadingText</div>
            }
            else if (!FilteredList.Any())
            {
                <div class="text-center text-muted py-3 small">@EmptyText</div>
            }
            else
            {
                @foreach (var item in FilteredList)
                {
                    <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center border-0 border-bottom py-2 px-3"
                         style="cursor:pointer;"
                         @onclick="@(() => SelectItem(item))">
                        @if (ItemTemplate is not null)
                        {
                            @ItemTemplate(item)
                        }
                        else
                        {
                            <div>@item?.ToString()</div>
                        }
                    </div>
                }
            }
        </div>
    </BodyContentTemplate>
</DxDropDown>

@code {
    [Parameter] public IEnumerable<TItem>? Data { get; set; }
    [Parameter] public Func<TItem, string>? DisplayText { get; set; }
    [Parameter] public Func<TItem, bool>? CustomFilter { get; set; } // lọc tùy chỉnh
    [Parameter] public string Placeholder { get; set; } = "Chọn...";
    [Parameter] public bool ReadOnly { get; set; } = false;
    [Parameter] public RenderFragment<TItem>? ItemTemplate { get; set; }
    [Parameter] public EventCallback<TItem?> SelectedItemChanged { get; set; }
    [Parameter] public TItem? SelectedItem { get; set; }

    [Parameter] public string LoadingText { get; set; } = "Đang tải dữ liệu...";
    [Parameter] public string EmptyText { get; set; } = "Không tìm thấy dữ liệu";

    private string SearchText = string.Empty;
    private bool IsDropdownVisible = false;
    private bool IsLoading => Data == null;
    private List<TItem> FilteredList = new();
    private string InputId = $"input_{Guid.NewGuid():N}";

    protected override void OnParametersSet()
    {
        FilterData();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        SearchText = e.Value?.ToString() ?? "";
        FilterData();
    }

    private void FilterData()
    {
        if (Data == null) return;

        IEnumerable<TItem> source = Data;

        if (CustomFilter != null)
        {
            source = source.Where(CustomFilter);
        }
        else if (!string.IsNullOrWhiteSpace(SearchText) && DisplayText != null)
        {
            source = source.Where(x => DisplayText(x)
                .Contains(SearchText, StringComparison.OrdinalIgnoreCase));
        }

        FilteredList = source.ToList();
    }

    private async Task SelectItem(TItem item)
    {
        SearchText = DisplayText?.Invoke(item) ?? item?.ToString() ?? "";
        IsDropdownVisible = false;
        await SelectedItemChanged.InvokeAsync(item);
    }
}
