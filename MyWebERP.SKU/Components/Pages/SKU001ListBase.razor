@using System.Text.Json;
@using System.Drawing
@using Blazored.LocalStorage;
@using System.Dynamic;
@using DevExpress.Blazor
@using MyWebERP.Data;
@using MyWebERP.Services;
@using MyWebERP.Model;
@using MyWebERP.Lib;
@using MyWebERP.Base.Components.Pages

@inherits ComponentBaseGrid1

@code
{
    protected DxListBox<WorkLookupModel, string>? listBoxWork;
    protected DxListBox<WorkItemLookupModel, string>? listBoxWorkItem;
    protected WorkLookupModel? WorkSelected;
    protected IEnumerable<WorkItemLookupModel>? ListWorkItemSelected;

    protected List<ExpandoObject> Data = new();
    protected List<string> FloorColumns = new();

    protected List<SKU001Model>? Appartments;// = new List<SKU001Model>();

    protected (int Row, int Col)? selectedEmpty;

    protected SKU001Model? selectedModel = null;

    // protected override async Task InitCfg()
    // {
    //     // Nhớ luôn phải gọi cái này để lấy thông tin cty, menu,...
    //     await base.InitCfg();

    //     filterPopup.CompanyId = CompanyId;
    //     filterPopup.CompanyMenuId = CompanyMenuId;

    //     //ListWork = await DataService.LookupCode<WorkLookupModel>(this.CompanyId, "", "", "", DateTime.Now, "WORK001", 1, "", 0, 0, 0, 0, this.CompanyMenuId, "WORK_LOOKUP_W");
    //     // ListWorkItem = await DataService.LookupCode<WorkItemLookupModel>(this.CompanyId, "", "", "", DateTime.Now, "WORK_ITEM001", 1, "", 0, 0, 0, 0, this.CompanyMenuId, "WORK_ITEM_LOOKUP_W");
    // }

    protected override async Task DataAsync()
    {
        // Để cho hiển thi skeleton
        Appartments = null;
        StateHasChanged();

        dynamic dParam = new System.Dynamic.ExpandoObject();
        dParam.company_id = CompanyId;
        dParam.company_menu_id = CompanyMenuId;
        dParam.data_code = menuItem.DataCode;
        dParam.work_id = WorkSelected?.work_id;// "K2406K160";

        if (ListWorkItemSelected != null && ListWorkItemSelected.Count() > 0)
        {
            dParam.work_item_id = string.Join(", ", ListWorkItemSelected.Select(x => x.work_item_id));
        }

        APIResultDataModel resultData = await DataService.GetDataSimple(dParam, menuItem.FetDataCode);

        //Appartments = new();
        FloorColumns = new();
        Data = new();

        StateHasChanged(); // báo Blazor render lại

        if (resultData != null)
        {
            int _iRowCount = resultData.count_of_items;

            if (_iRowCount > 0)
            {
                Appartments = System.Text.Json.JsonSerializer.Deserialize<List<SKU001Model>>(resultData.data_details.ToString());
            }
        }

        if (Appartments == null)
        {
            // Không có thì khởi tạo.
            Appartments = new();
        }

        // ===== Pivot sang Data cho DxGrid =====
        int maxCol = Appartments.Max(a => a.col);
        int maxRow = Appartments.Max(a => a.row);

        // Danh sách cột tầng
        //FloorColumns = Enumerable.Range(1, maxCol).Select(i => $"Floor{i:D2}").ToList();
        FloorColumns = Enumerable.Range(1, maxCol).Select(i => $"Cột {(i):D}").ToList();

        for (int r = 1; r <= maxRow; r++)
        {
            dynamic row = new ExpandoObject();
            var dict = (IDictionary<string, object>)row;

            foreach (var c in FloorColumns.Select((name, idx) => new { name, idx }))
            {
                var apt = Appartments.FirstOrDefault(a => a.row == r && a.col == (c.idx + 1));
                dict[c.name] = apt; // null nếu không có căn hộ
            }

            Data.Add(row);
        }

        StateHasChanged(); // báo Blazor render lại

    }

    protected async Task OnCellClick(SKU001Model? apt, int row, int col)
    {
        if (apt != null)
        {
            selectedModel = apt;
            selectedEmpty = null;
            //Console.WriteLine($"Click căn hộ {apt.sku_id} tại ({row}, {col})");
        }
        else
        {
            selectedModel = null;
            selectedEmpty = (row, col);
            //Console.WriteLine($"Click ô trống tại ({row}, {col})");
        }

        // gọi xử lý ở cha nếu cần (ví dụ EventCallback)
        // if (OnCellClicked.HasDelegate)
        //     await OnCellClicked.InvokeAsync((apt, row, col));

        // StateHasChanged();
    }

    protected string GetCellColor(SKU001Model apt)
    {
        if (string.IsNullOrEmpty(apt.display_barcode) || apt.display_barcode == "-")
        {
            return "#ccc"; // màu xám khi không có căn hộ
        }

        // if (apt.color == 0)
        // {
        //     return "#e0e0e0"; // fallback màu mặc định
        // }

        return CM.IntColor2HtmlColor(apt.color);
    }

    #region tooltip
    protected SKU001Model? popupSkuModel;

    protected async Task ShowTooltip(MouseEventArgs e, object row)
    {
        popupSkuModel = (SKU001Model)row;

        // Lấy size tooltip & window
        var rect = await JS.InvokeAsync<JsonElement>("getTooltipSize", ".grid-cell-tooltip-div");
        int tooltipWidth = (int)Math.Round(rect.GetProperty("width").GetDouble());
        int tooltipHeight = (int)Math.Round(rect.GetProperty("height").GetDouble());

        var win = await JS.InvokeAsync<JsonElement>("getWindowSize");
        int windowWidth = (int)Math.Round(win.GetProperty("width").GetDouble());
        int windowHeight = (int)Math.Round(win.GetProperty("height").GetDouble());

        // Lấy size tooltip & window
        int offset = 10;
        int x = (int)e.ClientX + offset;
        int y = (int)e.ClientY + offset;

        // Smart X/Y
        if (x + tooltipWidth > windowWidth) x = (int)e.ClientX - tooltipWidth - offset;
        if (y + tooltipHeight > windowHeight) y = (int)e.ClientY - tooltipHeight - offset;

        // chuột trong cell 0.4s thì mới show
        await JS.InvokeVoidAsync("showTooltipWithDelay", ".grid-cell-tooltip-div", x, y, 700);
    }

    protected void HideTooltip(MouseEventArgs e)
    {
        popupSkuModel = null;
        JS.InvokeVoidAsync("hideTooltip", ".grid-cell-tooltip-div");
    }

    protected bool HasTooltip(SKU001Model apt)
        => apt?.tooltips != null && apt.tooltips.Count > 0;
    #endregion

    #region Filter
    protected ProjectBlockFilterPopup filterPopup;
    protected string FilterSummaryText;

    protected async Task HandleFilterConfirm((WorkLookupModel work, List<WorkItemLookupModel> listWorkItem) result)
    {
        // Đây là đoạn ẩn popup để hiện ra skeleton cho biết đang xử lý dũ liệu
        // Sau khi xử lý xong → đóng popup
        //FilterPopupVisible = false;

        // Appartments = null;
        // StateHasChanged();

        WorkSelected = result.work;
        ListWorkItemSelected = result.listWorkItem;

        var projectName = WorkSelected?.work_name ?? "Chưa chọn dự án";
        var blockNames = ListWorkItemSelected.Any() ? string.Join(", ", ListWorkItemSelected.Select(b => b.work_item_name)) : "";
        FilterSummaryText = $"{projectName}";

        if(!String.IsNullOrEmpty(blockNames))
        {
            FilterSummaryText = $"{projectName}; {blockNames}";
        }

        // TODO: gọi lại API để nạp dữ liệu grid
        await DataAsync();
    }

    protected async Task ShowFilterPopup()
    {
        // Chờ DxPopup render xong rồi gọi ShowAsync của child
        if (filterPopup != null)
        {
            await filterPopup.ShowAsync(true); // true = load lại dữ liệu mỗi lần mở
        }
    }




    #endregion End filter

    #region zoom

    // --- Base sizes (gốc) --
    protected int BaseColumnWidth = 80;// 120;   // px gốc cho 100%
    protected int BaseCellHeight = 32;// 50;     // px gốc
    protected int BaseFontSize = 12;       // px gốc
    protected int BasePadding = 6;         // px gốc

    // Scale percent (100 = 100%)
    protected int Scale = 100;
    protected double scaleFactor => Scale / 100.0;

    // Effective computed sizes
    protected int EffectiveColumnWidth => (int)Math.Round(BaseColumnWidth * scaleFactor);
    protected int EffectiveCellHeight => (int)Math.Round(BaseCellHeight * scaleFactor);
    protected int EffectiveFontSize => (int)Math.Round(BaseFontSize * scaleFactor);
    protected int EffectivePadding => (int)Math.Round(BasePadding * scaleFactor);

    protected void ZoomIn()
    {
        if (Scale < 200) // max 200%
            Scale += 10;
    }

    protected void ZoomOut()
    {
        if (Scale > 50) // min 50%
            Scale -= 10;
    }
    #endregion zoom
}