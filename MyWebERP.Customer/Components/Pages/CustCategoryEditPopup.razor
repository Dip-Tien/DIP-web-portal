@using MyWebERP.Base.Components.Pages
@using MyWebERP.Data;

@inherits MyEditPopupBase

<DxPopup
Visible="@Visible"
ShowFooter="false"
HeaderText="Thêm nhóm khách hàng"
VisibleChanged="@VisibleChanged">
    <HeaderContentTemplate>
        <DxToolbar>
            <DxToolbarItem RenderStyle="ButtonRenderStyle.Primary"
                           Text="Lưu"
                           Id="btnSubmit"
                           SubmitFormOnClick="true"
                           form="@FormId"
                           Enabled="@(FormStatus!= EditFormStatus.VIEW)" />

            <DxToolbarItem RenderStyle="ButtonRenderStyle.Secondary"
                           Text="Hủy"
                           Enabled="@(FormStatus != EditFormStatus.VIEW)"
                           Click="@(async() => await VisibleChanged.InvokeAsync(false))" />
        </DxToolbar>
    </HeaderContentTemplate>
    <BodyContentTemplate>
        <CustCategoryEdit FormId="@FormId" 
        FormSubmitted="@OnFormSubmitted"
        CompanyId="@CompanyId"
        EditDataId="@EditDataId"
        FormStatus="@FormStatus"
                          MenuItem="@MenuItem"
        LocalStorageService="@LocalStorageService"
        DataService="@DataService"
        />
    </BodyContentTemplate>
    @* <FooterContentTemplate>
        @if (String.IsNullOrEmpty(MyErrorMessage) == false)
        {
            <div style="color:red">@MyErrorMessage</div>
        }
        <DxButton CssClass="popup-button my-1 ms-2"
                  RenderStyle="ButtonRenderStyle.Primary"
                  Text="Lưu (Ctrl + S)"
                  Id="btnSubmit"
        SubmitFormOnClick="true"
        form="@FormId" />
        <DxButton CssClass="popup-button my-1 ms-2"
        RenderStyle="ButtonRenderStyle.Secondary"
        Text="Hủy"
        Click="@(async() => await VisibleChanged.InvokeAsync(false))" />
    </FooterContentTemplate> *@
</DxPopup>

@code {
    readonly string FormId = "CustCategoryEditPopup";
    [Parameter] public EventCallback<Model.CustCategoryModel> PopupClosed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (FormStatus == Data.EditFormStatus.NEW)
            FormTitle = "Thêm nhóm khách hàng";
        else
            FormTitle = "Sửa nhóm khách hàng";
    }

    async Task OnFormSubmitted(EditContext editContext) {
        var custCagegory = (Model.CustCategoryModel)editContext.Model;

        string sApiCode = FormStatus == Data.EditFormStatus.NEW ? MenuItem.InsDataCode : MenuItem.UpdDataCode;
        Model.APIResultModel _resultIns = await DataService.CallMyApi(custCagegory, sApiCode);

        if (_resultIns.Status != 0)
        {
            MyErrorMessage = _resultIns.StatusDetails;

            return;
        }

        var custCategorySaved = Newtonsoft.Json.JsonConvert.DeserializeObject<Model.CustCategoryModel>(_resultIns.Data.ToString());

        await VisibleChanged.InvokeAsync(false);
        await PopupClosed.InvokeAsync(custCategorySaved);
    }

    
}