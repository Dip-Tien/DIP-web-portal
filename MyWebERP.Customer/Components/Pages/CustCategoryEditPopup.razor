@using MyWebERP.Base.Components
@using MyWebERP.Base.Components.Pages
@using MyWebERP.Data;

@inherits MyEditPopupBase


<DxPopup Visible="@Visible" CloseOnOutsideClick="false"
         ShowFooter="true"
         HeaderText=@FormTitle
         VisibleChanged="@VisibleChanged">
    <BodyContentTemplate>
        <CustCategoryEdit FormId="@FormId" 
                            FormSubmitted="@OnFormSubmitted"
                            CompanyId="@CompanyId"
                            EditDataId="@EditDataId"
                            FormStatus="@FormStatus"
                          MenuItem="@MenuItem"
                          Language="@Language"
                        LocalStorageService="@LocalStorageService"
                        DataService="@DataService"
                        />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <div class="d-flex flex-column w-100">

            @if (!string.IsNullOrEmpty(MyErrorMessage))
            {
                <div class="text-danger fw-semibold small text-center mb-2">
                    @MyErrorMessage
                </div>
            }

            <div class="d-flex w-100 gap-2">
                <DxButton CssClass="flex-fill py-2 rounded-3 shadow-sm d-flex align-items-center justify-content-center"
                          RenderStyle="ButtonRenderStyle.Primary"
                          Text="@Language["Lưu"]"
                          Id="btnSubmit"
                          IconCssClass="bi bi-check-circle me-2"
                          SubmitFormOnClick="true"
                          form="@FormId" />

                <DxButton CssClass="flex-fill py-2 rounded-3 shadow-sm d-flex align-items-center justify-content-center"
                          RenderStyle="ButtonRenderStyle.Danger"
                          RenderStyleMode="ButtonRenderStyleMode.Outline"
                          Text="@Language["Hủy"]"
                          IconCssClass="bi bi-x-circle me-2"
                          Click="@(async () => await CloseAsync(null))" />
            </div>
        </div>
    </FooterContentTemplate>
</DxPopup>

@code {
    readonly string FormId = "CustCategoryEditPopup";
    //[Parameter] public EventCallback<Model.CustCategoryModel> PopupClosed { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (FormStatus == Data.EditFormStatus.NEW)
            FormTitle = Language["Thêm nhóm khách hàng"];
        else
            FormTitle = Language["Sửa nhóm khách hàng"];
    }

    async Task OnFormSubmitted(EditContext editContext) {
        var custCagegory = (Model.CustCategoryModel)editContext.Model;

        string sApiCode = FormStatus == Data.EditFormStatus.NEW ? MenuItem.InsDataCode : MenuItem.UpdDataCode;
        Model.APIResultModel _resultIns = await DataService.CallMyApi(custCagegory, sApiCode);

        if (_resultIns.Status != 0)
        {
            MyErrorMessage = _resultIns.StatusDetails;

            return;
        }

        var custCategorySaved = Newtonsoft.Json.JsonConvert.DeserializeObject<Model.CustCategoryModel>(_resultIns.Data.ToString());

        await VisibleChanged.InvokeAsync(false);
        await OnClose.InvokeAsync(custCategorySaved);
        await CloseAsync(custCategorySaved);
    }

    
    // public override async Task CloseAsync()
    // {
    //     await VisibleChanged.InvokeAsync(false);
    //     //await OnClose.InvokeAsync(customerSaved);
    // }
}