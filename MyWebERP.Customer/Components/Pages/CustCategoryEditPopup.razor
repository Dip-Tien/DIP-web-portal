@using MyWebERP.Base.Components.Pages
@using MyWebERP.Data;

@inherits MyEditPopupBase

<DxPopup Visible="@Visible" CloseOnOutsideClick="false"
         ShowFooter="true"
         HeaderText=@FormTitle
         VisibleChanged="@VisibleChanged">
    <BodyContentTemplate>
        <CustCategoryEdit FormId="@FormId" 
        FormSubmitted="@OnFormSubmitted"
        CompanyId="@CompanyId"
        EditDataId="@EditDataId"
        FormStatus="@FormStatus"
                          MenuItem="@MenuItem"
        LocalStorageService="@LocalStorageService"
        DataService="@DataService"
        
        />
    </BodyContentTemplate>
    <FooterContentTemplate>
        @if (String.IsNullOrEmpty(MyErrorMessage) == false)
        {
            <div style="color:red">@MyErrorMessage</div>
        }
        <DxButton CssClass="popup-button my-1 ms-2"
                  RenderStyle="ButtonRenderStyle.Primary"
                  Text="@(isXSmallScreen?Language["Lưu"]: $"{Language["lưu"]} (Ctrl + S)")"
                  Id="btnSubmit"
                  SubmitFormOnClick="true"
                  form="@FormId" />
        <DxButton CssClass="popup-button my-1 ms-2"
                  RenderStyle="ButtonRenderStyle.Secondary"
                  Text="@Language["Hủy"]"
                  Click="@(async() => await VisibleChanged.InvokeAsync(false))" />
    </FooterContentTemplate>
</DxPopup>

@code {
    readonly string FormId = "CustCategoryEditPopup";
    [Parameter] public EventCallback<Model.CustCategoryModel> PopupClosed { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     if (FormStatus == Data.EditFormStatus.NEW)
    //         FormTitle = Language["Thêm nhóm khách hàng"];
    //     else
    //         FormTitle = Language["Sửa nhóm khách hàng"];
    // }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (FormStatus == Data.EditFormStatus.NEW)
            FormTitle = Language["Thêm nhóm khách hàng"];
        else
            FormTitle = Language["Sửa nhóm khách hàng"];
    }

    async Task OnFormSubmitted(EditContext editContext) {
        var custCagegory = (Model.CustCategoryModel)editContext.Model;

        string sApiCode = FormStatus == Data.EditFormStatus.NEW ? MenuItem.InsDataCode : MenuItem.UpdDataCode;
        Model.APIResultModel _resultIns = await DataService.CallMyApi(custCagegory, sApiCode);

        if (_resultIns.Status != 0)
        {
            MyErrorMessage = _resultIns.StatusDetails;

            return;
        }

        var custCategorySaved = Newtonsoft.Json.JsonConvert.DeserializeObject<Model.CustCategoryModel>(_resultIns.Data.ToString());

        await VisibleChanged.InvokeAsync(false);
        await PopupClosed.InvokeAsync(custCategorySaved);
    }

    
}